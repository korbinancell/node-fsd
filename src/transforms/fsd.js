const parseFsd = require('../');

function generateFsd(fsdString) {
	const api = parseFsd(fsdString);

	// TODO validation
	// TODO find out if we should try to preserve strings in attributes params unlike https://facilityapi.github.io/editor/

	const remarks = [`\n${genRemark(api)}`];
	const members = api.members.map(member => {
		if (member.remarks) remarks.push(genRemark(member));
		switch(member.type.value) {
			case('method'): {
				return `\n${genSummary(member.summaryLines, 1)}${genAttributes(member.attributes, 1)}  method ${member.name.value}
  {${genDataBody(member.requestBody)}
  }:
  {${genDataBody(member.responseBody)}
  }`
			}
			case('data'): {
				return `\n${genSummary(member.summaryLines, 1)}${genAttributes(member.attributes, 1)}  data ${member.name.value}
  {${genDataBody(member.members)}
  }`
			}
			case('enum'): {
				return `\n${genSummary(member.summaryLines, 1)}${genAttributes(member.attributes, 1)}  enum ${member.name.value}
  {${genEnumBody(member.types)}
  }`
			}
			case('errors'): {
				return `\n${genSummary(member.summaryLines, 1)}${genAttributes(member.attributes, 1)}  errors ${member.name.value}
  {${genEnumBody(member.errors)}
  }`
			}
		}
	})

	return `// DO NOT EDIT: generated by a node-fsd transform

${genSummary(api.summaryLines)}${genAttributes(api.attributes)}service ${api.name.value}
{${members.join('\n')}
}${remarks.join('\n')}
`
}

const genTabs = amount => new Array(amount + 1).join('  ');
const genRemark = member => `\n# ${member.name.value}\n\n${member.remarks}`;
const genSummary = (summaryLines, tabs = 0) => `${summaryLines.length ? `${genTabs(tabs)}/// ${summaryLines.map(x => x.value).join(' ')}\n` : ''}`;
const genAttributes = (attrs, tabs = 0) => `${attrs.map(x => `${genTabs(tabs)}[${x.name.value}${x.params ? `(${x.params.map(q => `${q.key.value}: ${q.value.type === 'string' ? `"${q.value.value}"` : q.value.value}`).join(', ')})` : ''}]\n`).join('')}`;
const genFieldType = type => {
	if (type.type === 'array') return `${genFieldType(type.kind)}[]`;
	if (type.type.type === 'templateTypes') return `${type.type.value}<${genFieldType(type.kind)}>`;
	return type.value;
}
const genDataBody = body => body.map(field => {
	return `\n${genSummary(field.summaryLines, 2)}${genAttributes(field.attributes, 2)}    ${field.name.value}: ${genFieldType(field.type)}${field.isRequired ? '!' : ''};`
}).join('\n');
const genEnumBody = body => body.map(field => {
	return `\n${genSummary(field.summaryLines, 2)}${genAttributes(field.attributes, 2)}    ${field.name.value},`
}).join('\n');

module.exports = generateFsd;