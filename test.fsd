/// Example service for widgets.
[http(url: "http://local.example.com/v1")]
[csharp(namespace: Facility.ExampleApi)]
service ExampleApi
{
	method help {} : {}
	/// Gets widgets.
	[http(method: GET, path: "/widgets")]
	method getWidgets
	{
		/// The query.
		/// The second query
		[http(from: query, name: q)]
		/// The third query
		query: map<map<string[][]>>;

		/// The limit of returned results.
		limit: int32;

		/// The sort field.
		sort: WidgetField;

		/// True to sort descending.
		desc: boolean;

		/// The maximum weight.
		[obsolete]
		maxWeight: double;
	}:
	{
		/// The widgets.
		widgets: Widget[];

		/// The total number of widgets.
		total: int64;

		/// The total weight.
		[obsolete]
		totalWeight: double;

		/// The pending job.
		[http(from: body, code: 202)]
		job: WidgetJob;
	}

	/// Creates a new widget.
	[http(method: POST, path: "/widgets/", code: 201)]
	method createWidget
	{
		/// The widget to create.
		[http(from: body)]
		widget: Widget;
	}:
	{
		/// The created widget.
		[http(from: body)]
		widget: Widget;
	}

	/// Gets the specified widget.
	[http(method: GET, path: "/widgets/{id}")]
	method getWidget
	{
		/// The widget ID.
		id: string;

		[http(from: header, name: "If-None-Match")]
		ifNoneMatch: string;
	}:
	{
		/// The requested widget.
		[http(from: body)]
		widget: Widget;

		[http(from: header)]
		eTag: string;

		[http(from: body, code: 304)]
		notModified: boolean;
	}

	/// Deletes the specified widget.
	[http(method: DELETE, path: "/widgets/{id}", code: 204)]
	method deleteWidget
	{
		/// The widget ID.
		id: string;
	}:
	{
	}
}